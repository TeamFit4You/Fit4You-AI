import matplotlib.pyplot as plt
import numpy as np
from sklearn.preprocessing import MinMaxScaler

dtw_data_corr = [3.380356618843977, 3.830745860893559, 3.974496519621914, 4.0548421007168605, 3.853954017782941, 3.76114519232847, 3.4268944944347237, 3.38137786891764, 3.7960826649808355, 3.834524477828235, 4.313023284903129, 4.409021537617666, 4.3719396783653535, 4.544814325092695, 4.376412700241509, 3.800245382740991, 3.613255010478266, 3.736789234952258, 3.6123755399999635, 3.5955806218784847, 3.506374093800275, 3.5600535160818465, 3.2993957145032495, 2.736899498226043, 2.507474389236208, 2.4589838458670563, 2.389135871446172, 2.3021663514209183, 2.354540672313529, 2.373051924478414, 2.086811001228063, 2.1251964130868313, 2.3169059094589772, 2.597525231062193, 2.6400082238111566, 2.8193281128483654, 2.8156524212216882, 2.659154211388368, 2.1163625200791314, 2.2773434913102233, 2.7913997282451675, 2.630109190911016, 2.4135956986106826, 2.5388570176381817, 2.57402083607335, 2.8013066107636235, 2.8585592423754034, 2.849113045975361, 2.745294970035038, 2.7227774575511976, 2.604492299689441, 2.3051107792192203, 2.3684930181555157, 2.619272270716746, 2.8981962359546785, 3.328170375366936, 3.120347254143111, 3.312471702011782, 3.4212438635831077, 2.7999816399509645, 2.2669120808067995, 2.189534348356714, 2.246321592568603, 2.3364988391575547, 2.417920711606051, 2.5770824506093315, 2.7431219040322348, 2.776410589943153, 2.595690306888565, 2.3658972381829573, 2.34921085692025, 2.2114597010131236, 2.3029542498614615, 2.113884472220684, 2.0996145447788597, 2.0316762052980186, 1.8828626878228933, 1.9368007694632534, 1.8194582021620171, 1.8565859898307757, 1.856503208348172, 2.0657525866899, 2.010080524669987, 2.0666277417366854, 2.0302355968239922, 1.786028535779222, 1.8128941735876876, 1.902542346401499, 2.0185782560424945, 2.0436482183151945, 2.2727477913737, 2.284562570956241, 2.2826573627282696, 2.2081170333365727, 2.3167855663935857, 2.394188725358761, 2.3132788913584172, 2.3581583351373165, 2.1829953866571685, 2.3058168973695246, 2.6129543791982686, 2.4248987686731986, 2.16024232655893, 2.016309841167151, 2.059170564262292, 2.028272029341456, 1.8339425804623024, 1.7930415635873949, 2.0032787098905356, 2.0260000080354224, 1.9768404556981294, 1.9592345912617173, 2.096251830661831, 2.234660657489312, 2.278592080292517, 2.4886057150660172, 2.204534557834474, 2.124932935609226, 1.9010377621121228, 1.9824164049187811, 2.119457049980275, 1.973331596691061, 1.9048349065258836, 1.869539390981574, 1.8857118510532653, 1.8884852816330664, 1.8718200600523143, 2.0221894819830895, 1.9696092964501881, 1.783269269336157, 1.7380089157927374, 1.919388445141633, 1.9093650226088055, 1.7786914256917328, 1.8698643294107262, 1.928181715523057, 1.9573952171206637, 2.0044504255973816, 1.94501106891284, 1.9835051696693025, 2.0591193286677143, 2.09840944461459, 2.1755739909084193, 2.110531293558174, 2.142547295986368, 2.1169356323149264, 2.0251650718634457, 1.9653263749039533, 1.9782040410623238, 1.9475070149644162, 1.834100127955063, 1.7087693762519411, 1.5369220917234585, 1.5476638476617561, 1.6088141055317098, 1.6879976184878682, 1.8748549224215787, 1.797792667403376, 1.8037611170651344, 1.7640722469534704, 1.8769727911343712, 1.8568059385949398, 1.8698994607427297, 1.8437802994292265, 1.8112042172151932, 1.7729829083023305, 1.806830424025951, 1.922360679532171, 2.005439861404934, 2.0873769517309575, 1.827043225547351, 1.8464135426543629, 1.6761831965555265, 1.8064881578702663, 2.0801715521667354, 1.7991523231868582, 1.7873135920734209, 1.702630267650383, 1.6900030381725266, 1.7296259321557543, 1.9416510280734767, 2.1887325128327677, 1.968900717646905, 1.438991058962376, 1.14103449128474, 1.247705498091531, 1.6633527861452126, 1.5268364593109036, 1.4403143997037415, 1.303239114680199, 1.601357948267557, 1.392998616514209, 1.5377232494138682, 1.60100707323644, 1.682830786820872, 1.7674515557784711, 2.172610310823255, 2.339882740323733, 2.448563328827401, 2.1652079383605387, 2.198414898378065, 2.9754831496263283, 3.702702060188468, 3.5380236919117287, 3.2899603122774295, 3.71595965035885, 4.293141328223059, 4.465072397718629, 4.6001020166666535, 4.586269181232367, 4.752225224476492, 5.072584181908746, 5.228554870872739, 4.901119483253005, 4.548829993188702, 5.02966522551493, 5.32207880003655, 4.870658110017181, 4.139945751941656, 3.430835923669143, 3.361145225894752, 3.977417910699539, 3.804742256187968, 3.889235304482348, 5.326585912001987, 5.596480001790358, 4.533083951206679, 4.372676296711973, 4.068745422186194, 3.9741925764258017, 4.256319560722859, 3.384441266413157, 3.690174211924237, 3.6243825588741294, 3.766556214567954, 3.6651684193779492, 3.4001856454227437, 3.6203064618119387, 3.5986625838221675, 3.552380398769405, 4.003764489177966, 4.390550755943203, 4.167389114290664, 4.320345129604304, 4.278515258354067, 3.9963759776048153, 3.641765385645322, 3.502760568706511, 3.199693247128942, 2.951275832825562, 3.0182576690027423, 3.1400128789802926, 3.4076718220090783, 3.4349707972882846, 3.370218571273794, 3.3576219909005, 3.236986725694232, 3.251794554879889, 3.36937450722518, 3.454524342258422, 3.4757120050774013, 3.45818638607817, 3.6498913490037133, 3.8033985194244573, 3.7324931073389784, 3.5852845804659736, 3.7825564974415506, 3.8457827420067976]
dtw_data_wrong = [0.7703165727706525, 1.7182700333241105, 1.7309724685896697, 1.4593304314242108, 1.3905533902660536, 1.4679479112136709, 1.608396797284311, 1.8211201956050016, 1.838249870042917, 1.6695035633399582, 1.536894632127676, 1.5466847452286745, 1.5568950834048942, 1.3637663661839807, 1.4577867307357484, 1.676917182185989, 1.6968670590658537, 1.5001877198665268, 1.4017262971277487, 1.2373068978297899, 1.312285294932678, 1.3329672504960097, 1.3354352205704607, 1.640332116624868, 1.8392973049420276, 1.8834516708703593, 1.9894652355969291, 1.9400778166945498, 1.9526629722525217, 1.8302733766292927, 1.8494791283596799, 1.6152008349327978, 1.3835490409854367, 1.4215788232525401, 1.2980681496361786, 1.0810158036441677, 1.0593666221964049, 1.1067824654997982, 0.8703728597406807, 0.8862103567800613, 1.7592780686707012, 1.6203130495557057, 1.4914866527798956, 1.7079026906972656, 1.951457587803059, 2.1425463150800566, 2.1539295601212887, 2.0777074946056344, 2.219642351978759, 2.117007256007487, 2.251002599600857, 2.0530738698042383, 1.9552684418059163, 1.8556545707236316, 2.024527401105543, 2.4561746534675923, 2.6136556632367274, 2.8933428797813794, 2.09246462700013, 1.9810717526520973, 1.820890196679746, 1.5941904061264287, 1.4103941744960011, 1.310705199516501, 1.3160210218271102, 1.4812362507319061, 1.3334627109867891, 1.3510373895675594, 1.0574132544445527, 0.7128116835060757, 0.8750680720759417, 0.916238712907983, 1.0800635625786104, 1.1723195800934572, 1.0162596768186192, 1.0653296062122444, 1.1581988837486201, 1.1985801848984172, 1.134553184411249, 1.2228912281363766, 1.1973246134101438, 1.0958858912030232, 0.9792263330820119, 0.7424495017425801, 1.1236861774291895, 1.4591595304339098, 1.5488700562799098, 1.6384129196849455, 1.4025889059358168, 1.4444627357281854, 1.373778986831565, 2.04012617277381, 1.9913942188320568, 1.751317501237755, 2.1114938217029007, 2.202324499217555, 1.890567791699126, 1.602790199438791, 1.4830359163491533, 1.4690002606868406, 1.6862395024191914, 1.904642713111456, 2.059915715143374, 2.0697238129890736, 2.127024447696969, 2.03437199124138, 1.8713134327835763, 1.97082886587787, 1.9647427838975982, 1.3115660738527188, 1.3032273932474419, 1.545820671341835, 1.5510157924665697, 0.9066086586943184, 0.7840605884577538, 1.4202559626390512, 1.5878308325419022, 1.9554484524831068, 1.456439488677794, 1.6573902001161398, 1.607968046985131, 1.582300465383232, 1.6894653910087916, 1.9484931025328824, 2.4168693885905848, 2.454283255672337, 2.4967862699098347, 2.587726464189408, 2.7077591823588953, 2.9773699607014197, 3.3295058880529096, 3.528769180047251, 4.603042464377577, 4.4046784443489, 4.648845488744531, 4.8556116517788634, 5.653960623991995, 6.493094234657949, 6.989606653168712, 6.985606785627151, 6.880681127421486, 6.4484445663445555, 6.4029968646289195, 6.231209351578856, 6.181611188772762, 6.716429541927638, 7.10996662085617, 6.897144218982119, 6.516493951144509, 6.588964371521583, 6.7508201066709805, 7.024943728261758, 7.3137557133087165, 7.2879038949008965, 7.243533543145929, 7.294506381912251, 7.250413947706307, 7.315747855804953, 7.248251414304004, 6.773853686878759, 6.537162384559982, 6.396468686312923, 6.322649642074434, 6.2536684354774765, 6.228267679940759, 6.259182077405393, 5.921263668334489, 6.0793803096104, 5.608806964076741, 5.583231369794093, 5.386356698348262, 5.131317330237091, 5.255724395531204, 4.408654547300919, 4.238483542407603, 3.6042412303970175, 3.5198964833245436, 2.7695767228851684, 2.56039112934445, 2.482360250464127, 2.1247764907551385, 1.6318417327230696, 1.856599323237999, 4.106461447037031, 4.685984085307708, 5.2326982383119525, 4.890571085762309, 5.166312531381872, 3.2496901824385076, 3.3961775016762785, 3.2759064467466095, 2.70426304364406, 2.312632549814843, 1.8373226212553, 2.7357253014524083, 2.4523131120057458, 2.8315457387392793, 3.375010901216018, 3.492392900772427, 2.8637649684294852, 2.710885459642689, 2.8523570667102947, 3.1300459050430947, 2.035220146450918, 2.475520597381449, 1.959619553185203, 2.3687420816707387, 2.875999390534819, 3.1453616372689086, 3.4890035465767846, 3.1732842713082725, 4.480559268434589, 4.3168322873683325, 3.787531299655791, 3.8773961708819584, 4.060023890748404, 4.112397039108425, 3.3359302167182077, 2.9792502587020246, 2.718085597871799, 3.340582673120511, 2.8957709493156223, 3.1789521075251677, 3.013512802563829, 3.614535834422747, 4.803306987590429, 3.4566253609764215, 3.274811660734866, 3.0842615724842064, 3.015734620211403, 3.2112966777542784, 3.559495015332857, 3.6913713126821994, 3.2015858707391835, 2.818230018497368, 2.598150017998748, 2.530569933275115, 2.4947069783765623, 2.5644206169253247, 2.261049794525935, 2.080397345528991, 2.188797296556613, 2.070940630306841, 1.896700740521404, 1.8445142645432615, 1.8239648325446918, 1.9439259357997565, 2.173590487295807, 1.925629256133264]

print('dtw_data_corr len : ', len(dtw_data_corr))
print('dtw_data_wrong len : ', len(dtw_data_wrong))

dtw_data_corr_arr = np.array(dtw_data_corr)
dtw_data_wrong_arr = np.array(dtw_data_wrong)

###20개씩 슬라이싱 평균
def average_by_group(array, group_size):
    n = len(array)
    num_groups = n // group_size
    remainder = n % group_size

    # 배열의 길이가 group_size의 배수가 아닌 경우, 남은 부분은 제외합니다.
    array = array[:n - remainder]

    # 배열을 group_size 만큼 묶은 후, 각 그룹의 평균을 계산합니다.
    grouped_array = np.mean(array.reshape(num_groups, group_size), axis=1)

    return grouped_array

c_20avg_arr = average_by_group(dtw_data_corr_arr, 20)
w_20avg_arr = average_by_group(dtw_data_wrong_arr, 20)

#correct graph
for i in range(len(c_20avg_arr)):
    plt.scatter(i, c_20avg_arr[i])

plt.title("Corr_ Scatter Plot")
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.ylim([0, 10])

plt.show()

#wrong graph
for i in range(len(w_20avg_arr)):
    plt.scatter(i, w_20avg_arr[i])

plt.title("Wrong_ Scatter Plot")
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.ylim([0, 10])

plt.show()


### EXP
c_20avg_arr_EXP = np.exp(c_20avg_arr)
w_20avg_arr_EXP = np.exp(w_20avg_arr)
print('c_20avg_arr_EXP : ', c_20avg_arr_EXP)
print('w_20avg_arr_EXP : ', w_20avg_arr_EXP)

#correct graph
for i in range(len(c_20avg_arr_EXP)):
    plt.scatter(i, c_20avg_arr_EXP[i])

plt.title("Corr_EXP Scatter Plot")
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.ylim([0, 1000])

plt.show()

#wrong graph
for i in range(len(w_20avg_arr_EXP)):
    plt.scatter(i, w_20avg_arr_EXP[i])

plt.title("Wrong_EXP Scatter Plot")
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.ylim([0, 1000])

plt.show()

### EXP_ACC
lim = 0
for i in range(len(c_20avg_arr_EXP)):
    if c_20avg_arr_EXP[i] > lim:
        lim = c_20avg_arr_EXP[i]
for i in range(len(w_20avg_arr_EXP)):
    if w_20avg_arr_EXP[i] > lim:
        lim = w_20avg_arr_EXP[i]

print('c_20avg_arr_EXP AVG : ', np.mean(c_20avg_arr_EXP))
print('w_20avg_arr_EXP AVG : ', np.mean(w_20avg_arr_EXP))
c_acc = (lim - c_20avg_arr_EXP) * 0.1
w_acc = (lim - w_20avg_arr_EXP) * 0.1
print('20 프레임 별 정확도_c : ', c_acc)
print('20 프레임 별 정확도_w : ', w_acc)
print('c_정확도 : ', np.mean(c_acc))
print('w_정확도 : ', np.mean(w_acc))

#정확도
C_ACC = np.mean(c_acc)
W_ACC = np.mean(w_acc)

consider_joint, Alpha = 1, 0 #임의로 설정
#consider_joint 는 main_jointangle 파일의 Joint_Range_is_OK 함수에서 return T / F 값으로 도출.

if consider_joint == 1:
    Alpha = 0.3
elif consider_joint == 2:
    Alpha = 0.25
elif consider_joint == 3:
    Alpha = 0.2

##추가해야하는 변수
Joint_is_Right = 1
Joint_is_Wrong = 0

Real_Acc_C = (1-Alpha)*C_ACC + (Alpha * 100)*Joint_is_Right
Real_Acc_W = (1-Alpha)*W_ACC + (Alpha * 100)*Joint_is_Wrong
print('기준 & 정답 정확도 : ', Real_Acc_C)
print('기준 & 오답 정확도 : ', Real_Acc_W)

###이동차분
# def moving_difference_absolute_values(data):
#     diff = np.diff(data)  # 이전 값과의 차이를 계산합니다.
#     abs_arr = np.abs(diff)  # 배열의 절댓값을 계산합니다.
#     return abs_arr
#
# # 이동 차분
# c_20avg_avg_diff_abs_val = moving_difference_absolute_values(c_20avg_arr)
# w_20avg_avg_diff_abs_val = moving_difference_absolute_values(w_20avg_arr)
#
# print(c_20avg_avg_diff_abs_val)
# print(w_20avg_avg_diff_abs_val)
#
# #이동 차분 평균
# print('c_20avg_avg_diff_abs_val_AVG : ', np.mean(c_20avg_avg_diff_abs_val))
# print('w_20avg_avg_diff_abs_val_AVG : ', np.mean(w_20avg_avg_diff_abs_val))
#
# #correct graph
# for i in range(len(c_20avg_avg_diff_abs_val)):
#     plt.scatter(i, c_20avg_avg_diff_abs_val[i])
#
# plt.title("Corr_20avg_diff_abs_val Scatter Plot")
# plt.xlabel("X-axis")
# plt.ylabel("Y-axis")
# plt.ylim([0, 10])
#
# plt.show()
#
# #wrong graph
# for i in range(len(w_20avg_avg_diff_abs_val)):
#     plt.scatter(i, w_20avg_avg_diff_abs_val[i])
#
# plt.title("Wrong_20avg_diff_abs_val Scatter Plot")
# plt.xlabel("X-axis")
# plt.ylabel("Y-axis")
#
# plt.ylim([0, 10])
#
# plt.show()
